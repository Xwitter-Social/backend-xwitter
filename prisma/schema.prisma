// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  name      String
  password  String
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts         Post[]
  comments      Comment[]
  likes         Like[]
  reposts       Repost[]
  messagesSent  Message[]

  followers     Follow[] @relation("Following") // Pessoas que me seguem
  following     Follow[] @relation("Follower")  // Pessoas que eu sigo

  conversations Conversation[]
}

model Follow {
  followerId  String
  followingId String

  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Post {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  createdAt DateTime @default(now())

  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  reposts   Repost[]
}

model Like {
  userId String
  postId String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model Repost {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  parentId  String?
  parent    Comment? @relation("NestedComments", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("NestedComments")

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants User[]
  messages     Message[]
}

model Message {
  id             String   @id @default(uuid())
  content        String
  createdAt      DateTime @default(now())
  
  authorId       String
  conversationId String

  author         User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}